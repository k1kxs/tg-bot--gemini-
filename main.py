import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from pydantic_settings import BaseSettings
from dotenv import load_dotenv
import sys
import asyncpg
import aiohttp
import traceback
import socket
import os
import sqlite3
import json
import re
import base64
import io
import typing
import time
import html
import datetime
import subprocess
import tempfile
import os
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI, AsyncOpenAI  # –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Chat –∏ Audio API
from openai import APIStatusError, BadRequestError  # –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –∞—É–¥–∏–æ
from PIL import Image  # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, # –£—Å—Ç–∞–Ω–æ–≤–∏–º INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, DEBUG –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º __name__

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
# –≠—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç .env.local –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–¢–¨ .env
load_dotenv('.env')
if os.path.exists('.env.local'):
    logging.info("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env.local, –∑–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –Ω–µ–≥–æ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—è .env)")
    load_dotenv('.env.local', override=True)
else:
    logging.info("–§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –í—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.info(f"DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('DATABASE_URL')}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SYSTEM_PROMPT = """###INSTRUCTIONS###

You MUST follow the instructions for answering:

- ALWAYS answer in the language of my message.
- Read the entire convo history line by line before answering.
- I have no fingers and the placeholders trauma. Return the entire code template for an answer when needed. NEVER use placeholders.
- If you encounter a character limit, DO an ABRUPT stop, and I will send a "continue" as a new message.
- You ALWAYS will be PENALIZED for wrong and low-effort answers. 
- ALWAYS follow "Answering rules."

###Answering Rules###

Follow in the strict order:

1. USE the language of my message.
2. **ONCE PER CHAT** assign a real-world expert role to yourself before answering, e.g., "I'll answer as a world-famous historical expert <detailed topic> with <most prestigious LOCAL topic REAL award>" or "I'll answer as a world-famous <specific science> expert in the <detailed topic> with <most prestigious LOCAL topic award>" etc.
3. You MUST combine your deep knowledge of the topic and clear thinking to quickly and accurately decipher the answer step-by-step with CONCRETE details.
4. Answer the question in a natural, human-like manner.
5. ALWAYS use an answering example for a first message structure.

##Answering in English example##

I'll answer as the world-famous <specific field> scientists with <most prestigious LOCAL award>

<Deep knowledge step-by-step answer, with CONCRETE details>
"""
CONVERSATION_HISTORY_LIMIT = 5
MESSAGE_EXPIRATION_DAYS = 2 # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (—á—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ 4096 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TELEGRAM_MAX_LENGTH = 4000

# –ö–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
class Settings(BaseSettings):
    TELEGRAM_BOT_TOKEN: str
    OPENAI_API_KEY: str
    DATABASE_URL: str
    # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    USE_SQLITE: bool = False

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å DSN –≤—Ä—É—á–Ω—É—é, –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    # DB_HOST: str | None = None
    # ... –∏ —Ç.–¥.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º USE_SQLITE –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    def __init__(self, **data):
        super().__init__(**data)
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        if self.DATABASE_URL:
            self.USE_SQLITE = self.DATABASE_URL.startswith('sqlite')
        else:
             logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
             # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–π—Ç–∏, –ª–∏–±–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
             # sys.exit(1)
             self.USE_SQLITE = True # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SQLite –≤ –ø–∞–º—è—Ç–∏
             self.DATABASE_URL = 'sqlite:///./telegram_bot_default.db'
             logger.warning(f"DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.DATABASE_URL}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ OpenAI (Chat –∏ Audio API)
openai_client = OpenAI(api_key=settings.OPENAI_API_KEY)
openai_async = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not settings.TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–º–µ–Ω—ã ---
progress_message_ids: dict[int, int] = {} # {user_id: message_id}
active_requests: dict[int, asyncio.Task] = {}  # {user_id: task}
pending_photo_prompts: set[int] = set()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
class IsAdmin(BaseFilter):
    """–§–∏–ª—å—Ç—Ä, –ø—Ä–æ–ø—É—Å–∫–∞—é—â–∏–π —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ–ª–µ is_admin –≤ –ë–î)."""
    async def __call__(self, message: types.Message) -> bool:  # noqa: D401
        db = dp.workflow_data.get('db')
        if not db:
            return False
        user = await get_user(db, message.from_user.id)
        return bool(user and user.get('is_admin', False))

# --- –ö–æ–Ω–µ—Ü —Ñ–∏–ª—å—Ç—Ä–∞ IsAdmin ---

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def progress_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_generation_{user_id}")
    return builder.as_markup()

def final_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_generation_{user_id}")
    return builder.as_markup()

# –î–æ–±–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.
    """
    button1 = types.KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    button2 = types.KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    button3 = types.KeyboardButton(text="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
    button4 = types.KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞")
    button5 = types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")
    button6 = types.KeyboardButton(text="üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ")
    keyboard = [
        [button1],
        [button2, button3],
        [button4, button5],
        [button6]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite –∏ PostgreSQL) ---
# (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)

async def init_sqlite_db(db_path):
    try:
        if db_path.startswith('sqlite:///'):
            db_path = db_path[10:]
        elif db_path.startswith('sqlite://'):
             db_path = db_path[9:]

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

        def _init_db():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                    content TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC)
            ''')
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,      -- Telegram User ID
                    username TEXT NULL,
                    first_name TEXT NOT NULL,
                    last_name TEXT NULL,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    free_messages_today INTEGER DEFAULT 7,
                    last_free_reset_date TEXT DEFAULT (date('now')), -- –ò—Å–ø–æ–ª—å–∑—É–µ–º TEXT –¥–ª—è –¥–∞—Ç—ã –≤ SQLite
                    subscription_status TEXT DEFAULT 'inactive' CHECK (subscription_status IN ('inactive', 'active')),
                    subscription_expires TIMESTAMP NULL,
                    is_admin BOOLEAN DEFAULT FALSE -- –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                )
            ''')
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü–∞ 'users' –¥–ª—è SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.") # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
            conn.close()

        await asyncio.to_thread(_init_db)
        logger.info("SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return db_path
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
        raise

async def init_db_postgres(pool: asyncpg.Pool):
    async with pool.acquire() as connection:
        try:
            await connection.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                content TEXT NOT NULL,
                timestamp TIMESTAMPTZ DEFAULT NOW()
            );
            CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC);
            ''')
            logger.info("–¢–∞–±–ª–∏—Ü–∞ conversations —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (PostgreSQL)")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è PostgreSQL
            try:
                await connection.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,      -- Telegram User ID
                        username TEXT NULL,
                        first_name TEXT NOT NULL,
                        last_name TEXT NULL,
                        registration_date TIMESTAMPTZ DEFAULT NOW(),
                        last_active_date TIMESTAMPTZ DEFAULT NOW(),
                        free_messages_today INTEGER DEFAULT 7,
                        last_free_reset_date DATE DEFAULT CURRENT_DATE,
                        subscription_status TEXT DEFAULT 'inactive' CHECK (subscription_status IN ('inactive', 'active')),
                        subscription_expires TIMESTAMPTZ NULL,
                        is_admin BOOLEAN DEFAULT FALSE -- –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                    );
                ''')
                logger.info("–¢–∞–±–ª–∏—Ü–∞ 'users' –¥–ª—è PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            except asyncpg.PostgresError as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users PostgreSQL: {e}")
                 raise # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å

        except asyncpg.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL (—Ç–∞–±–ª–∏—Ü–∞ conversations): {e}") # –£—Ç–æ—á–Ω—è–µ–º –ª–æ–≥
            raise
        except Exception as e:
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL: {e}")
            raise

# –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
async def add_message_to_db(db, user_id: int, role: str, content: str):
    if settings.USE_SQLITE:
        return await add_message_to_sqlite(db, user_id, role, content)
    else:
        return await add_message_to_postgres(db, user_id, role, content)

async def get_last_messages(db, user_id: int, limit: int = CONVERSATION_HISTORY_LIMIT) -> list[dict]:
    if settings.USE_SQLITE:
        return await get_last_messages_sqlite(db, user_id, limit)
    else:
        return await get_last_messages_postgres(db, user_id, limit)

# SQLite-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_sqlite(db_path: str, user_id: int, role: str, content: str):
    try:
        def _add_message():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            # –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å PG)
            cursor.execute(
                "INSERT INTO conversations (user_id, role, content) VALUES (?, ?, ?)",
                (user_id, role, content)
            )
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                DELETE FROM conversations
                WHERE id NOT IN (
                    SELECT id
                    FROM conversations
                    WHERE user_id = ?
                    ORDER BY timestamp DESC
                    LIMIT ?
                ) AND user_id = ?
            """, (user_id, CONVERSATION_HISTORY_LIMIT, user_id))
            conn.commit()
            conn.close()

        await asyncio.to_thread(_add_message)
        logger.debug(f"SQLite: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT})")
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def get_last_messages_sqlite(db_path: str, user_id: int, limit: int) -> list[dict]:
    try:
        def _get_messages():
            conn = sqlite3.connect(db_path)
            conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ dict-like
            cursor = conn.cursor()
            cursor.execute(
                "SELECT role, content FROM conversations WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
                (user_id, limit)
            )
            rows = cursor.fetchall()
            conn.close()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ dict
            return [{'role': row['role'], 'content': row['content']} for row in rows]

        messages = await asyncio.to_thread(_get_messages)
        logger.debug(f"SQLite: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# PostgreSQL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_postgres(pool: asyncpg.Pool, user_id: int, role: str, content: str):
    try:
        async with pool.acquire() as connection:
            async with connection.transaction(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await connection.execute(
                    "INSERT INTO conversations (user_id, role, content) VALUES ($1, $2, $3)",
                    user_id, role, content
                )
                # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
                cleanup_query = """
                WITH ranked_messages AS (
                    SELECT id, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY timestamp DESC) as rn
                    FROM conversations
                    WHERE user_id = $1
                )
                DELETE FROM conversations
                WHERE id IN (SELECT id FROM ranked_messages WHERE rn > $2);
                """
                await connection.execute(cleanup_query, user_id, CONVERSATION_HISTORY_LIMIT)
        logger.debug(f"PostgreSQL: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT}).")
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise

async def get_last_messages_postgres(pool: asyncpg.Pool, user_id: int, limit: int) -> list[dict]:
    try:
        async with pool.acquire() as connection:
            records = await connection.fetch(
                "SELECT role, content FROM conversations WHERE user_id = $1 ORDER BY timestamp DESC LIMIT $2",
                user_id, limit
            )
            messages = [{'role': record['role'], 'content': record['content']} for record in records]
            logger.debug(f"PostgreSQL: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π users ---

async def get_or_create_user(db, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    user_data = await get_user(db, user_id)
    if user_data:
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è/username, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        # await update_user_info(db, user_id, username, first_name, last_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
        await update_user_last_active(db, user_id)
        return user_data

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if settings.USE_SQLITE:
        return await add_user_sqlite(db, user_id, username, first_name, last_name)
    else:
        return await add_user_postgres(db, user_id, username, first_name, last_name)

async def get_user(db, user_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    if settings.USE_SQLITE:
        def _get():
            conn = sqlite3.connect(db)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            conn.close()
            return dict(row) if row else None
        return await asyncio.to_thread(_get)
    else: # PostgreSQL
        async with db.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
            return dict(row) if row else None

async def add_user_sqlite(db_path: str, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite."""
    try:
        def _add():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT INTO users (
                    user_id, username, first_name, last_name,
                    last_active_date, last_free_reset_date, free_messages_today
                ) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, date('now'), 7)
                ON CONFLICT(user_id) DO NOTHING -- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
                """,
                (user_id, username, first_name, last_name)
            )
            conn.commit()
            conn.close()
            logger.info(f"SQLite: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        await asyncio.to_thread(_add)
        return await get_user(db_path, user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def add_user_postgres(pool: asyncpg.Pool, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL."""
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users (
                    user_id, username, first_name, last_name,
                    last_active_date, last_free_reset_date, free_messages_today
                ) VALUES ($1, $2, $3, $4, NOW(), CURRENT_DATE, 7)
                ON CONFLICT (user_id) DO NOTHING -- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
                """,
                user_id, username, first_name, last_name
            )
        logger.info(f"PostgreSQL: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        return await get_user(pool, user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def update_user_last_active(db, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if settings.USE_SQLITE:
            def _update():
                conn = sqlite3.connect(db)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET last_active_date = CURRENT_TIMESTAMP WHERE user_id = ?", (user_id,))
                conn.commit()
                conn.close()
            await asyncio.to_thread(_update)
        else: # PostgreSQL
            async with db.acquire() as conn:
                await conn.execute("UPDATE users SET last_active_date = NOW() WHERE user_id = $1", user_id)
        # logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ last_active_date –¥–ª—è user_id={user_id}") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_active_date –¥–ª—è user_id={user_id}: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π ---
async def update_user_limits(db, user_id: int, free_messages_today: int, last_free_reset_date: datetime.date | None = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∞—Ç—É —Å–±—Ä–æ—Å–∞."""
    if settings.USE_SQLITE:
        def _update():
            conn = sqlite3.connect(db)
            cursor = conn.cursor()
            if last_free_reset_date:
                cursor.execute(
                    "UPDATE users SET free_messages_today = ?, last_free_reset_date = ? WHERE user_id = ?",
                    (free_messages_today, last_free_reset_date.isoformat(), user_id)
                )
            else:
                cursor.execute(
                    "UPDATE users SET free_messages_today = ? WHERE user_id = ?",
                    (free_messages_today, user_id)
                )
            conn.commit()
            conn.close()
        await asyncio.to_thread(_update)
    else:
        async with db.acquire() as conn:
            if last_free_reset_date:
                await conn.execute(
                    "UPDATE users SET free_messages_today = $1, last_free_reset_date = $2 WHERE user_id = $3",
                    free_messages_today, last_free_reset_date, user_id
                )
            else:
                await conn.execute(
                    "UPDATE users SET free_messages_today = $1 WHERE user_id = $2",
                    free_messages_today, user_id
                )

async def deactivate_subscription(db, user_id: int):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if settings.USE_SQLITE:
        def _deact():
            conn = sqlite3.connect(db)
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET subscription_status = 'inactive', subscription_expires = NULL WHERE user_id = ?",
                (user_id,)
            )
            conn.commit()
            conn.close()
        await asyncio.to_thread(_deact)
    else:
        async with db.acquire() as conn:
            await conn.execute(
                "UPDATE users SET subscription_status = 'inactive', subscription_expires = NULL WHERE user_id = $1",
                user_id
            )

async def check_and_consume_limit(db, settings: Settings, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç, —Å–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    user_data = await get_user(db, user_id)
    if not user_data:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞.")
        return False
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê ---
    if user_data.get('is_admin', False):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
        return True
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    now = datetime.datetime.now(datetime.timezone.utc)
    today = now.date()
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_sub = False
    if user_data.get('subscription_status') == 'active':
        sub_exp = user_data.get('subscription_expires')
        if isinstance(sub_exp, datetime.datetime):
            if sub_exp.tzinfo is None:
                sub_exp = sub_exp.replace(tzinfo=datetime.timezone.utc)
            if sub_exp > now:
                is_sub = True
            else:
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞ {sub_exp}, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º.")
                await deactivate_subscription(db, user_id)
                user_data['subscription_status'] = 'inactive'
        else:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç subscription_expires –¥–ª—è user_id={user_id}")
    if is_sub:
        return True
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    raw_date = user_data.get('last_free_reset_date')
    last_date = None
    if isinstance(raw_date, datetime.date):
        last_date = raw_date
    elif isinstance(raw_date, str):
        try:
            last_date = datetime.date.fromisoformat(raw_date)
        except (ValueError, TypeError):
            last_date = today - datetime.timedelta(days=1)
    limit = user_data.get('free_messages_today', 0)
    if last_date is None or last_date < today:
        limit = 7
        await update_user_limits(db, user_id, limit, today)
    # 3. –°–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑
    if limit > 0:
        await update_user_limits(db, user_id, limit - 1)
        return True
    return False

# --- –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ---
# –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
# async def update_user_limits(...)
# async def update_user_subscription(...)

# --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å XAI API ---

async def stream_o4mini_response(api_key: str, system_prompt: str, history: list[dict]) -> typing.AsyncGenerator[str, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç gpt-4.1-mini –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Vision API
    formatted_history = []
    for msg in history:
        role = msg.get("role")
        content = msg.get("content")
        if isinstance(content, str):
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å –∫–ª—é—á–æ–º "text"
            formatted_history.append({"role": role, "content": [{"type": "text", "text": content}]})
        elif isinstance(content, list):
            # –ï—Å–ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            # –í–∞–∂–Ω–æ: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "text"
            corrected_content_list = []
            for part in content:
                if part.get("type") == "text" and "content" in part:
                    corrected_content_list.append({"type": "text", "text": part["content"]})
                else:
                    corrected_content_list.append(part) # –æ—Å—Ç–∞–≤–ª—è–µ–º image_url –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–∞–∫ –µ—Å—Ç—å
            formatted_history.append({"role": role, "content": corrected_content_list})
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å content –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
    messages = [{"role": "system", "content": system_prompt}] + formatted_history
    
    # –°—Ç—Ä–∏–º–∏–Ω–≥ —á–µ—Ä–µ–∑ openai_async
    resp = await openai_async.chat.completions.create(
        model="gpt-4.1-mini",
        messages=messages,
        temperature=0.2,
        max_tokens=3000,
        top_p=0.9,
        frequency_penalty=0,
        presence_penalty=0,
        stream=True
    )
    async for chunk in resp:
        delta = chunk.choices[0].delta.content
        if delta:
            yield delta

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown –≤ HTML –¥–ª—è Telegram ---
def markdown_to_telegram_html(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ HTML, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Telegram."""
    import re, html

    if not text:
        return ""

    code_blocks: dict[str, str] = {}
    placeholder_counter = 0

    def _extract_code_block(match):
        nonlocal placeholder_counter
        placeholder = f"@@CODEBLOCK_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    def _extract_inline_code(match):
        nonlocal placeholder_counter
        placeholder = f"@@INLINECODE_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    text = re.sub(r"```(?:\w+)?\n([\s\S]*?)```", _extract_code_block, text, flags=re.DOTALL)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ inline-–∫–æ–¥–∞
    text = re.sub(r"`([^`]+?)`", _extract_inline_code, text)

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = html.escape(text, quote=False)

    # –°—Å—ã–ª–∫–∏ [text](url)
    def _replace_link(match):
        label = match.group(1)
        url = match.group(2)
        safe_url = html.escape(url, quote=True)
        return f'<a href="{safe_url}">{label}</a>'
    text = re.sub(r"\[([^\]]+)\]\(([^)]+)\)", _replace_link, text)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ #‚Ä¶##
    text = re.sub(r"^(#{1,6})\s*(.+)$", lambda m: f"<b>{m.group(2)}</b>\n", text, flags=re.MULTILINE)

    # –ñ–∏—Ä–Ω—ã–π **text**
    text = re.sub(r"\*\*([^\*]+)\*\*", r"<b>\1</b>", text)
    # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ __text__
    text = re.sub(r"__([^_]+)__", r"<u>\1</u>", text)
    # –ö—É—Ä—Å–∏–≤ *text* –∏ _text_
    text = re.sub(r"(?<!\*)\*([^*]+)\*(?!\*)", r"<i>\1</i>", text)
    text = re.sub(r"(?<!_)_([^_]+)_(?!_)", r"<i>\1</i>", text)
    # –ó–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ ~~text~~
    text = re.sub(r"~~(.+?)~~", r" \1‚Å† ", text)
    # –°–ø–æ–π–ª–µ—Ä—ã ||text||
    text = re.sub(r"\|\|(.+?)\|\|", r"<tg-spoiler>\1</tg-spoiler>", text)

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    for placeholder, code in code_blocks.items():
        escaped = html.escape(code, quote=False)
        if placeholder.startswith("@@CODEBLOCK_"):
            replacement = f"<pre>{escaped}</pre>"
        else:
            replacement = f"<code>{escaped}</code>"
        text = text.replace(placeholder, replacement)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (–Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r'\n{3,}', '\n\n', text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    text = text.strip()

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∞—Ä–∫–µ—Ä–æ–≤ Markdown (*, _, ~), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–ª–æ–≤ –∏ –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏
    text = re.sub(r'[\*_~]', '', text)

    return text

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def split_text(text: str, length: int = TELEGRAM_MAX_LENGTH) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= length:
        return [text]

    chunks = []
    start = 0
    while start < len(text):
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã
        end = start + length
        if end >= len(text):
            chunks.append(text[start:])
            break

        split_pos = -1
        # –ò—â–µ–º —Å –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É —á–∞–Ω–∫–∞
        for i in range(end - 1, start -1, -1):
            if text[i] == '\n':
                split_pos = i + 1 # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞–Ω–∫
                break
            elif text[i] == ' ':
                split_pos = i + 1 # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
                break

        if split_pos != -1 and split_pos > start: # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
            chunks.append(text[start:split_pos])
            start = split_pos
        else: # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            # –ü—Ä–æ—Å—Ç–æ —Ä—É–±–∏–º –ø–æ –¥–ª–∏–Ω–µ
            chunks.append(text[start:end])
            start = end

    return chunks

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not text:
        return ""
    # –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
    to_escape = r'_\*\[\]\(\)~`>#+\-=|{}.!'
    return re.sub(f'([{to_escape}])', r'\\\1', text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º user_id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ start_handler –¥–ª—è user_id={user_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ s1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ start_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ s2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (start): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboardMarkup
    keyboard = main_menu_keyboard()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

@dp.message(
    F.text
    & ~F.text.startswith('/')  # –∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    & ~(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    & ~(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
    & ~(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
    & ~(F.text == "üÜò –ü–æ–º–æ—â—å")
    & ~(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    & ~(F.text == "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ")
)
async def message_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_photo_prompts:
        pending_photo_prompts.remove(user_id)
        prompt = message.text
        try:
            response = await openai_async.images.generate(
                model="dall-e-3",
                prompt=prompt
            )
            url = response.data[0].url
            await message.reply_photo(photo=url, reply_markup=main_menu_keyboard())
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ", reply_markup=main_menu_keyboard())
        return
    chat_id = message.chat.id
    user_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ workflow_data
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å user_data - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_requests:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", reply_markup=progress_keyboard(user_id))
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
    active_requests[user_id] = asyncio.current_task()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=chat_id, action="typing")

    current_message_id = None # –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ finally/except
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_message_to_db(db, user_id, "user", user_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–ø–∏—Å–µ–π: {len(history)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        is_allowed = await check_and_consume_limit(db, current_settings, user_id)
        if not is_allowed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
            await message.reply(
                "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=kb.as_markup()
            )
            return

        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ-—Ä–∞–∑–±–∏–µ–Ω–∏–µ–º ---
        full_raw_response = ""
        current_message_text = "" # –¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è TG
        placeholder_message = None
        message_count = 0 # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Å—Ç–µ–π)
        last_edit_time = 0
        edit_interval = 1.5
        formatting_failed = False

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        try:
            placeholder_message = await message.answer("‚è≥", reply_markup=progress_keyboard(user_id))  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞
            current_message_id = placeholder_message.message_id
            message_count = 1
            last_edit_time = time.monotonic()
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞: {e}")
            return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        async for chunk in stream_o4mini_response(current_settings.OPENAI_API_KEY, SYSTEM_PROMPT, history):
            if not current_message_id: # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                 logger.warning("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ message_id.")
                 break

            full_raw_response += chunk
            now = time.monotonic()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –ª–∏–º–∏—Ç –¢–ï–ö–£–©–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è
            tentative_next_text = current_message_text + chunk
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å —É—á–µ—Ç–æ–º HTML –∏ "..."
                html_to_check = markdown_to_telegram_html(tentative_next_text) + "..."
                check_formatting_failed = False
            except Exception as fmt_err:
                logger.warning(f"Formatting error during length check: {fmt_err}")
                html_to_check = tentative_next_text + "..." # –ü—Ä–æ–≤–µ—Ä—è–µ–º raw –¥–ª–∏–Ω—É
                check_formatting_failed = True
                formatting_failed = True # –û—Ç–º–µ—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ

            if len(html_to_check) > TELEGRAM_MAX_LENGTH:
                # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (ID: {current_message_id}) –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã.")
                try:
                    final_part_html = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                    if final_part_html: # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                        await bot.edit_message_text(
                            text=final_part_html,
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None if formatting_failed else ParseMode.HTML,
                            reply_markup=progress_keyboard(user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
                        )
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                    if not formatting_failed:
                        formatting_failed = True
                        logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ raw –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")
                        try:
                            if current_message_text:
                                await bot.edit_message_text(text=current_message_text, chat_id=chat_id, message_id=current_message_id, parse_mode=None, reply_markup=None)
                        except TelegramAPIError as plain_e:
                            logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {plain_e}")
                            current_message_id = None # –¢–µ—Ä—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ.")
                        current_message_id = None

                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏: —É–±–∏—Ä–∞–µ–º –æ—Ç–º–µ–Ω—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π placeholder
                current_message_text = chunk  # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–≤–æ–≥–æ —á–∞–Ω–∫–∞
                message_count += 1
                try:
                    # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=current_message_id, reply_markup=None)
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π placeholder —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'
                    placeholder_message = await message.answer("...", reply_markup=progress_keyboard(user_id))
                    current_message_id = placeholder_message.message_id
                    last_edit_time = time.monotonic()
                    logger.info(f"–ù–∞—á–∞—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} (ID: {current_message_id})")
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                    current_message_id = None
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            else:
                # –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                current_message_text += chunk

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º
                if now - last_edit_time > edit_interval:
                    try:
                        html_to_send = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                        text_to_show = html_to_send + "..."

                        await bot.edit_message_text(
                            text=text_to_show,
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None if formatting_failed else ParseMode.HTML,
                            reply_markup=progress_keyboard(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
                        )
                        last_edit_time = now
                    except TelegramRetryAfter as e:
                        logger.warning(f"Throttled: RetryAfter {e.retry_after}s")
                        await asyncio.sleep(e.retry_after + 0.1)
                        last_edit_time = time.monotonic()
                    except TelegramAPIError as e:
                         logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (mid-stream): {e}")
                         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø–∞–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                         if any(msg in str(e).lower() for msg in ("message to edit not found", "message can't be edited", "message is not modified")):
                             logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_count} (ID: {current_message_id}) –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                             current_message_id = None
                             # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç.–∫. —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                         elif not formatting_failed: # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–ø–∞–∂–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –º—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ raw
                             formatting_failed = True
                             logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ raw –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                         # –ï—Å–ª–∏ —É–∂–µ raw –∏–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    except Exception as e:
                         logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")


        # --- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ü–û–°–õ–ï–î–ù–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ ---
        if current_message_id and current_message_text:
            logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (ID: {current_message_id})")
            try:
                final_html = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                # –æ—Ñ–æ—Ä–º–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                await bot.edit_message_text(
                    text=final_html,
                    chat_id=chat_id,
                    message_id=current_message_id,
                    parse_mode=None if formatting_failed else ParseMode.HTML,
                    reply_markup=None
                )
                # –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ReplyKeyboardMarkup –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await message.answer(
                    "ü´°",
                    reply_markup=main_menu_keyboard()
                )
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} {'RAW' if formatting_failed else 'HTML'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å raw –∫–∞–∫ fallback
                try:
                    # Raw fallback: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                    await bot.edit_message_text(
                        text=current_message_text,
                        chat_id=chat_id,
                        message_id=current_message_id,
                        parse_mode=None,
                        reply_markup=None
                    )
                    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} RAW –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ HTML.")
                except TelegramAPIError as plain_e:
                    logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {plain_e}")
                    # –ö–∞–∫ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    try:
                         await message.answer(
                             text=current_message_text,
                             parse_mode=None,
                             reply_markup=main_menu_keyboard()
                         )
                         logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    except Exception as final_send_err:
                         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å {message_count} –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {final_send_err}")

        elif not full_raw_response and message_count == 1 and current_message_id:
            # –ï—Å–ª–∏ API –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç XAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                # –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫, –∑–∞—Ç–µ–º –º–µ–Ω—é
                await bot.edit_message_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.",
                    chat_id=chat_id,
                    message_id=current_message_id,
                    reply_markup=None
                )
                await message.answer(
                    "ü´°",
                    reply_markup=main_menu_keyboard()
                )
            except TelegramAPIError:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î ---
        if full_raw_response:
            try:
                await add_message_to_db(db, user_id, "assistant", full_raw_response)
                logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (RAW) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î: {e}")
        # (–õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è else: logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç...) –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            if current_message_id:
                 await bot.edit_message_text(error_message, chat_id=chat_id, message_id=current_message_id, reply_markup=None)
            else: # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ ID –Ω–µ—Ç
                await message.answer(error_message + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        except TelegramAPIError:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ active_requests –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è user_id={user_id}. –û—á–∏—Å—Ç–∫–∞ active_requests.")
        removed_task = active_requests.pop(user_id, None)
        if removed_task:
            logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ active_requests –¥–ª—è user_id={user_id}")
        else:
            logger.warning(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ active_requests –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∫–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
@dp.callback_query(F.data.startswith("cancel_generation_"))
async def cancel_generation_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É, —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    try:
        user_id_to_cancel = int(callback.data.rsplit("_", 1)[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return

    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –±—ã–ª–∞
    task = active_requests.pop(user_id_to_cancel, None)
    if task:
        task.cancel()
        db = dp.workflow_data.get('db')
        settings_local = dp.workflow_data.get('settings')
        if db and settings_local:
            try:
                if settings_local.USE_SQLITE:
                    def _restore():
                        conn = sqlite3.connect(db)
                        cursor = conn.cursor()
                        cursor.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = ?",
                            (user_id_to_cancel,)
                        )
                        conn.commit()
                        conn.close()
                    await asyncio.to_thread(_restore)
                else:
                    async with db.acquire() as conn:
                        await conn.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = $1",
                            user_id_to_cancel
                        )
            except Exception:
                logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è user_id={user_id_to_cancel}")

    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramAPIError:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "ü´°",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(F.data == "clear_history")
async def clear_history_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ bot.dispatcher)
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback)")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        callback.from_user.username,
        callback.from_user.first_name,
        callback.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_history_callback")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ ch1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_history_callback): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite():
                db_path = db # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection: # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id) # –£–±—Ä–∞–ª RETURNING id –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                # result —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "DELETE N", –ø–∞—Ä—Å–∏–º N
                try:
                    rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1 # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await callback.answer(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)", show_alert=False)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback) –¥–ª—è user_id={user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear ---
@dp.message(Command("clear"))
async def clear_command_handler(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear)")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_command_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ cl1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_command): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite_cmd():
                db_path = db
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite_cmd)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection:
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id)
                try:
                     rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear) –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è vision) ---
@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} —Å –ø–æ–¥–ø–∏—Å—å—é: '{message.caption[:50] if message.caption else '[–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏]'}...'")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(
        db, user_id, message.from_user.username,
        message.from_user.first_name, message.from_user.last_name
    )
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Vision API
    try:
        if user_id in active_requests:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.",
                reply_markup=progress_keyboard(user_id)
            )
            return
             
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.photo[-1].file_id)
        image_bio = await bot.download_file(file.file_path)
        image_bytes = image_bio.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        mime_type = "image/jpeg"
        if file.file_path and '.png' in file.file_path.lower():
            mime_type = "image/png"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –¥–ª—è Vision API
        history = await get_last_messages(db, user_id)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        history.append({
            "role": "user",
            "content": [
                {"type": "text", "text": message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"},
                {"type": "image_url", "image_url": {
                    "url": f"data:{mime_type};base64,{base64_image}"
                }}
            ]
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–±–µ–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        await add_message_to_db(db, user_id, "user", message.caption or "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        active_requests[user_id] = asyncio.current_task() # –í–∞–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ó–ê–î–ê–ß–£, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–∞—Å–∫
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º placeholder
        placeholder = await message.reply("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=progress_keyboard(user_id))
        current_msg_id = placeholder.message_id
        full_response = ""
        
        # –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç –æ—Ç gpt-4.1-mini Vision
        async for chunk in stream_o4mini_response(current_settings.OPENAI_API_KEY, SYSTEM_PROMPT, history):
            full_response += chunk
            # –î–æ–±–∞–≤–∏–º —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            now = time.monotonic()
            last_edit_time = globals().get(f"last_edit_{user_id}", 0)
            edit_interval = 1.5
            if now - last_edit_time > edit_interval:
                try:
                    preview_html = markdown_to_telegram_html(full_response + "...")
                    await bot.edit_message_text(
                        text=preview_html,
                        chat_id=chat_id,
                        message_id=current_msg_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    globals()[f"last_edit_{user_id}"] = now
                except TelegramRetryAfter as e:
                    logger.warning(f"Throttled editing photo response: RetryAfter {e.retry_after}s")
                    await asyncio.sleep(e.retry_after + 0.1)
                    globals()[f"last_edit_{user_id}"] = time.monotonic()
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                    if "message to edit not found" in str(e).lower():
                        break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ
                        
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        try:
             final_html = markdown_to_telegram_html(full_response)
             await bot.edit_message_text(
                 text=final_html,
                 chat_id=chat_id,
                 message_id=current_msg_id,
                 parse_mode=ParseMode.HTML,
                 reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
             )
             await message.answer("ü´°", reply_markup=main_menu_keyboard()) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            try:
                await bot.edit_message_text(text=full_response, chat_id=chat_id, message_id=current_msg_id, reply_markup=None)
                await message.answer("ü´°", reply_markup=main_menu_keyboard())
            except Exception as final_err:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –¥–∞–∂–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç: {final_err}")
                 await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        if full_response:
            await add_message_to_db(db, user_id, "assistant", full_response)
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ photo_handler –¥–ª—è user_id={user_id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        active_requests.pop(user_id, None)
        globals().pop(f"last_edit_{user_id}", None) # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@dp.message(F.document)
async def document_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    file_name = message.document.file_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    mime_type = message.document.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    file_id = message.document.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={user_id}: {file_name} (type: {mime_type}, file_id: {file_id})")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(db, user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–ø—É—â–µ–Ω –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' (–ª–∏–º–∏—Ç OK).")
    await message.reply(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}'...")
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–¥–µ—Å—å

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ReplyKeyboardMarkup
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def handle_new_dialog_button(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
    await clear_command_handler(message)

@dp.message(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
async def handle_my_limits_button(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    if not db:
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    user_data = await get_user(db, user_id)
    if not user_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return
    limit_info = f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today', 'N/A')}"
    sub_info = "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription_status') == 'active':
        expires_ts = user_data.get('subscription_expires')
        if isinstance(expires_ts, datetime.datetime):
            expires_str = expires_ts.strftime('%Y-%m-%d %H:%M')
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_str}"
        else:
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_ts}"
    await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö:\n\n{limit_info}\n{sub_info}")

@dp.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.reply(
        "–†–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞'.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n- 7 –¥–Ω–µ–π / 100 —Ä—É–±.\n- 30 –¥–Ω–µ–π / 300 —Ä—É–±.\n\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)"
    )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    help_text = (
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "ü§ñ –Ø –ø–µ—Ä–≤—ã–π \"—É–º–Ω—ã–π\" –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n"
        "üìä –ö–Ω–æ–ø–∫–∞ \"–ú–æ–∏ –ª–∏–º–∏—Ç—ã\" –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞.\n"
        "üíé –ö–Ω–æ–ø–∫–∞ \"–ü–æ–¥–ø–∏—Å–∫–∞\" —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤."
    )
    await message.reply(help_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def handle_ask_question_button(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç üëá", reply_markup=main_menu_keyboard())

@dp.message(F.text == "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ")
async def handle_generate_photo_button(message: types.Message):
    user_id = message.from_user.id
    pending_photo_prompts.add(user_id)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (–æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å)", reply_markup=main_menu_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_shutdown
async def on_shutdown(**kwargs):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    # –ü–æ–ª—É—á–∞–µ–º dp –∏ –∏–∑ –Ω–µ–≥–æ workflow_data
    dp_local = kwargs.get('dispatcher') # aiogram –ø–µ—Ä–µ–¥–∞–µ—Ç dispatcher
    if not dp_local:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dispatcher –≤ on_shutdown")
        return

    db = dp_local.workflow_data.get('db')
    settings_local = dp_local.workflow_data.get('settings')

    if db and settings_local:
        if not settings_local.USE_SQLITE:
            try:
                # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
                if isinstance(db, asyncpg.Pool):
                    await db.close()
                    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç 'db' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º asyncpg, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL: {e}")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'db' –∏–ª–∏ 'settings' –∏–∑ workflow_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.")

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) ---
async def set_bot_commands(bot_instance: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        types.BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        types.BotCommand(command="/admin", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"),
        types.BotCommand(command="/find_user", description="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"),
        types.BotCommand(command="/list_subs", description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"),
        types.BotCommand(command="/grant_admin", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/grant_sub", description="–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π"),
        types.BotCommand(command="/send_to_user", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        types.BotCommand(command="/broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
    ]
    try:
        await bot_instance.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    db_connection = None # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è

    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if settings.USE_SQLITE:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            db_connection = await init_sqlite_db(settings.DATABASE_URL) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {settings.DATABASE_URL}")
                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è create_pool
                db_connection = await asyncio.wait_for(
                    asyncpg.create_pool(dsn=settings.DATABASE_URL, timeout=30.0, command_timeout=60.0, min_size=1, max_size=10),
                    timeout=45.0 # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
                )
                if not db_connection:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL (–≤–µ—Ä–Ω—É–ª—Å—è None)")
                    sys.exit(1)

                logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                await init_db_postgres(db_connection)

            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                sys.exit(1)
            except (socket.gaierror, OSError) as e: # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/DNS
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ DNS –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –≤ DATABASE_URL.")
                sys.exit(1)
            except asyncpg.exceptions.InvalidPasswordError:
                 logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                 sys.exit(1)
            except asyncpg.exceptions.InvalidCatalogNameError as e: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É InvalidCatalogNameError
                 logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ URL, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. {e}")
                 sys.exit(1)
            except asyncpg.PostgresError as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—É—Ç—å –∫ SQLite –∏–ª–∏ –ø—É–ª PG) –≤ workflow_data
        dp.workflow_data['db'] = db_connection
        dp.workflow_data['settings'] = settings
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DB –∏ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dispatcher")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ shutdown –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dp.shutdown.register(on_shutdown)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ - –ø–æ–º–µ—â–∞–µ–º –∑–¥–µ—Å—å, –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ try
        await set_bot_commands(bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á
async def cleanup_tasks():
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        [task.cancel() for task in tasks]
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

async def generate_response_task(
    message: types.Message,
    db,
    current_settings: Settings,
    user_id: int,
    user_text: str,
    chat_id: int
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
    progress_msg = None
    full_raw = ""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_msg = await message.reply(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
            reply_markup=progress_keyboard(user_id)
        )
        progress_message_ids[user_id] = progress_msg.message_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        await add_message_to_db(db, user_id, "user", user_text)
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        current_text = ""
        last_edit = time.monotonic()
        interval = 1.5
        formatting_failed = False
        # –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        async for chunk in stream_o4mini_response(
            current_settings.OPENAI_API_KEY,
            SYSTEM_PROMPT,
            history
        ):
            full_raw += chunk
            current_text += chunk
            now = time.monotonic()
            if now - last_edit > interval and progress_msg:
                try:
                    preview = markdown_to_telegram_html(current_text) + '...'
                    await bot.edit_message_text(
                        text=preview,
                        chat_id=chat_id,
                        message_id=progress_msg.message_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    last_edit = now
                except TelegramRetryAfter as rte:
                    await asyncio.sleep(rte.retry_after + 0.1)
                    last_edit = time.monotonic()
                except TelegramAPIError:
                    formatting_failed = True
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        if progress_msg:
            final_text = markdown_to_telegram_html(current_text) if not formatting_failed else current_text
            await bot.edit_message_text(
                text=final_text,
                chat_id=chat_id,
                message_id=progress_msg.message_id,
                parse_mode=ParseMode.HTML,
                reply_markup=None
            )
            await message.answer("ü´°", reply_markup=main_menu_keyboard())
        else:
            # –ï—Å–ª–∏ progress_msg –∏—Å—á–µ–∑, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π
            parts = split_text(markdown_to_telegram_html(full_raw))
            for i, part in enumerate(parts):
                await message.answer(part, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard() if i == len(parts)-1 else None)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if full_raw:
            await add_message_to_db(db, user_id, "assistant", full_raw)
    except asyncio.CancelledError:
        # –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ
        if progress_msg:
            try:
                await bot.edit_message_text(
                    text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    chat_id=chat_id,
                    message_id=progress_msg.message_id,
                    reply_markup=None
                )
            except TelegramAPIError:
                pass
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ generate_response_task –¥–ª—è user_id={user_id}: {e}")
        if progress_msg:
            try:
                await bot.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
                    chat_id=chat_id,
                    message_id=progress_msg.message_id,
                    reply_markup=None
                )
            except TelegramAPIError:
                pass
    finally:
        progress_message_ids.pop(user_id, None)
        active_requests.pop(user_id, None)

# --- –ù–ê–ß–ê–õ–û: –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π is_admin ---

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
ADMIN_COMMANDS_LIST = [
    ("/admin", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥."),
    ("/stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."),
    ("/find_user", "`<id_or_username>` - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ @username."),
    ("/list_subs", "`[active|expired]` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'active', –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 'expired')."),
    ("/grant_admin", "–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."),
    ("/grant_sub", "`<user_id> <7|30>` - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."),
    ("/send_to_user", "`<user_id> <text>` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."),
    ("/broadcast", "`<text>` - **–û–°–¢–û–†–û–ñ–ù–û!** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)."),
]

@dp.message(Command("admin"), IsAdmin())
async def admin_help_menu(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥."""
    help_lines = ["<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"]

    for command, description in ADMIN_COMMANDS_LIST:
        escaped_description = html.escape(description)
        help_lines.append(f"<code>{command}</code> - {escaped_description}")

    help_text = "\n".join(help_lines)
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("stats"), IsAdmin())
async def admin_stats_enhanced(message: types.Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    try:
        stats = await get_extended_stats(db, settings_local)
        report = (
            "üìä *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* üìä\n\n"
            "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            f"- –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_week']}\n"
            f"- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
            f"- –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_week']}\n\n"
            "*–ü–æ–¥–ø–∏—Å–∫–∏:*\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {stats['active_subs']}\n"
            f"- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_subs_today']}\n"
            f"- –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_subs_week']}\n"
            f"- –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: {stats['expiring_subs']}\n"
        )
        await message.reply(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(Command("grant_admin"), IsAdmin())
async def grant_admin_handler(message: types.Message):
    db = dp.workflow_data.get('db')
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_admin <user_id>")
    try:
        target_id = int(parts[1])
    except ValueError:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target = await get_user(db, target_id)
    if not target:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update_user_admin(db, target_id, True)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@dp.message(Command("grant_sub"), IsAdmin())
async def grant_sub_handler(message: types.Message):
    """–í—ã–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π."""
    db = dp.workflow_data.get('db')
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_sub <user_id> <days>")
    try:
        target_id = int(parts[1])
        days = int(parts[2])
    except ValueError:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ: /grant_sub <user_id> <days>")
    if days not in (7, 30):
        return await message.reply("–ú–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π.")
    target = await get_user(db, target_id)
    if not target:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await update_user_subscription(db, target_id, days)
    new_data = await get_user(db, target_id)
    expires = new_data.get('subscription_expires')
    await message.reply(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {expires}).")

@dp.message(Command("broadcast"), IsAdmin())
async def broadcast_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    user_id = message.from_user.id
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è IsAdmin
    settings_local = dp.workflow_data.get('settings')
    text = (command.args or "").strip()
    if not text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
    if settings_local.USE_SQLITE:
        def _all_ids():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM users")
            ids = [r[0] for r in cur.fetchall()]
            conn.close()
            return ids
        user_ids = await asyncio.to_thread(_all_ids)
    else:
        async with db.acquire() as conn:
            records = await conn.fetch("SELECT user_id FROM users")
            user_ids = [r['user_id'] for r in records]
    sent = 0
    total = len(user_ids)
    for uid in user_ids:
        try:
            await bot.send_message(uid, text)
            sent += 1
            logger.info(f"Broadcast to {uid} succeeded")
        except Exception as e:
            logger.warning(f"Broadcast to {uid} failed: {e}")
        await asyncio.sleep(0.1)
    await message.reply(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent}/{total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("find_user"), IsAdmin())
async def admin_find_user(message: types.Message, command: CommandObject):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    if not db:
        return await message.reply("–û—à–∏–±–∫–∞ –ë–î")
    if not command.args:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username: /find_user <query>")
    query = command.args.strip()
    user_data = None
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID
    try:
        user_id_to_find = int(query)
        user_data = await get_user(db, user_id_to_find)
    except ValueError:
        # –ü–æ–∏—Å–∫ –ø–æ username
        query_lower = query.lower().lstrip('@')
        if settings_local.USE_SQLITE:
            def _find_by_username():
                conn = sqlite3.connect(db)
                conn.row_factory = sqlite3.Row
                cur = conn.cursor()
                cur.execute(
                    "SELECT * FROM users WHERE lower(username) = ?", (query_lower,)
                )
                row = cur.fetchone()
                conn.close()
                return dict(row) if row else None
            user_data = await asyncio.to_thread(_find_by_username)
        else:
            async with db.acquire() as conn:
                row = await conn.fetchrow(
                    "SELECT * FROM users WHERE lower(username) = $1", query_lower
                )
                user_data = dict(row) if row else None
    if not user_data:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    info_lines = [f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':"]
    info_lines.append(f"ID: {user_data.get('user_id')}")
    info_lines.append(f"Username: {user_data.get('username')}")
    info_lines.append(
        f"–ò–º—è: {user_data.get('first_name')} {user_data.get('last_name')}"
    )
    info_lines.append(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('registration_date')}")
    info_lines.append(
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('last_active_date')}"
    )
    info_lines.append(
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today')}"
    )
    info_lines.append(
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {user_data.get('subscription_status')}"
    )
    info_lines.append(
        f"–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: {user_data.get('subscription_expires')}"
    )
    info_lines.append(f"–ê–¥–º–∏–Ω: {user_data.get('is_admin')}" )
    await message.reply("\n".join(info_lines))

@dp.message(Command("list_subs"), IsAdmin())
async def list_subs_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    mode = (command.args or "active").strip().lower()
    logger.info(f"Admin {message.from_user.id} –≤—ã–∑–≤–∞–ª /list_subs mode={mode}")
    if settings_local.USE_SQLITE:
        def _list():
            conn = sqlite3.connect(db)
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            if mode == "active":
                cur.execute("SELECT user_id, username FROM users WHERE subscription_status='active'")
            else:
                cur.execute(
                    "SELECT user_id, username FROM users WHERE subscription_status='inactive' AND DATE(subscription_expires) BETWEEN DATE('now','-7 days') AND DATE('now')"
                )
            rows = cur.fetchall()
            conn.close()
            return rows
        rows = await asyncio.to_thread(_list)
        subs = [dict(r) for r in rows]
    else:
        async with db.acquire() as conn:
            if mode == "active":
                records = await conn.fetch("SELECT user_id, username FROM users WHERE subscription_status='active'")
            else:
                records = await conn.fetch(
                    "SELECT user_id, username FROM users WHERE subscription_status='inactive' AND subscription_expires BETWEEN (NOW() - INTERVAL '7 days') AND NOW()"
                )
            subs = [dict(r) for r in records]
    if not subs:
        await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
        return
    lines = [f"{s['user_id']} (@{s.get('username','')})" for s in subs]
    text = f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ ({mode}):\n" + "\n".join(lines)
    await message.reply(text)

@dp.message(Command("send_to_user"), IsAdmin())
async def send_to_user_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    # –õ–∏–±–æ —Ñ–∏–ª—å—Ç—Ä IsAdmin
    parts = (command.args or "").split(None, 1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to_user <user_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        target = int(parts[0])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")
        return
    text = parts[1]
    try:
        await bot.send_message(target, text)
        logger.info(f"Admin {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
        await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {target}: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")

# --- –ö–û–ù–ï–¶: –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---

# --- Admin helper functions: —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ---
async def get_extended_stats(db, settings: Settings) -> dict[str, int]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    # SQLite
    if settings.USE_SQLITE:
        def _ext():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users")
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE last_active_date>=DATE('now')")
            active_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE last_active_date>=DATE('now','-7 days')")
            active_week = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE registration_date>=DATE('now')")
            new_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE registration_date>=DATE('now','-7 days')")
            new_week = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires>DATE('now')")
            active_subs = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=DATE('now')")
            new_subs_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=DATE('now','-7 days')")
            new_subs_week = cur.fetchone()[0]
            cur.execute(
                "SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires BETWEEN DATE('now') AND DATE('now','+7 days')"
            )
            expiring = cur.fetchone()[0]
            conn.close()
            return {
                'total_users': total,
                'active_today': active_today,
                'active_week': active_week,
                'new_today': new_today,
                'new_week': new_week,
                'active_subs': active_subs,
                'new_subs_today': new_subs_today,
                'new_subs_week': new_subs_week,
                'expiring_subs': expiring
            }
        return await asyncio.to_thread(_ext)
    # PostgreSQL
    async with db.acquire() as conn:
        rec = await conn.fetchrow(
            """
            SELECT
             (SELECT COUNT(*) FROM users) AS total,
             (SELECT COUNT(*) FROM users WHERE last_active_date>=CURRENT_DATE) AS active_today,
             (SELECT COUNT(*) FROM users WHERE last_active_date>=(CURRENT_DATE - INTERVAL '7 days')) AS active_week,
             (SELECT COUNT(*) FROM users WHERE registration_date>=CURRENT_DATE) AS new_today,
             (SELECT COUNT(*) FROM users WHERE registration_date>=(CURRENT_DATE - INTERVAL '7 days')) AS new_week,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires>NOW()) AS active_subs,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=CURRENT_DATE) AS new_subs_today,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=(CURRENT_DATE - INTERVAL '7 days')) AS new_subs_week,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires BETWEEN NOW() AND (NOW() + INTERVAL '7 days')) AS expiring_subs
            """
        )
    return {
        'total_users': rec['total'],
        'active_today': rec['active_today'],
        'active_week': rec['active_week'],
        'new_today': rec['new_today'],
        'new_week': rec['new_week'],
        'active_subs': rec['active_subs'],
        'new_subs_today': rec['new_subs_today'],
        'new_subs_week': rec['new_subs_week'],
        'expiring_subs': rec['expiring_subs']
    }

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
@dp.callback_query(F.data.startswith("cancel_generation_"))
async def cancel_generation_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É, —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    try:
        user_id_to_cancel = int(callback.data.rsplit("_", 1)[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return

    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –±—ã–ª–∞
    task = active_requests.pop(user_id_to_cancel, None)
    if task:
        task.cancel()
        db = dp.workflow_data.get('db')
        settings_local = dp.workflow_data.get('settings')
        if db and settings_local:
            try:
                if settings_local.USE_SQLITE:
                    def _restore():
                        conn = sqlite3.connect(db)
                        cursor = conn.cursor()
                        cursor.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = ?",
                            (user_id_to_cancel,)
                        )
                        conn.commit()
                        conn.close()
                    await asyncio.to_thread(_restore)
                else:
                    async with db.acquire() as conn:
                        await conn.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = $1",
                            user_id_to_cancel
                        )
            except Exception:
                logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è user_id={user_id_to_cancel}")

    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramAPIError:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "ü´°",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(F.data == "clear_history")
async def clear_history_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ bot.dispatcher)
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback)")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        callback.from_user.username,
        callback.from_user.first_name,
        callback.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_history_callback")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ ch1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_history_callback): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite():
                db_path = db # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection: # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id) # –£–±—Ä–∞–ª RETURNING id –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                # result —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "DELETE N", –ø–∞—Ä—Å–∏–º N
                try:
                    rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1 # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await callback.answer(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)", show_alert=False)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback) –¥–ª—è user_id={user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear ---
@dp.message(Command("clear"))
async def clear_command_handler(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear)")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_command_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ cl1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_command): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite_cmd():
                db_path = db
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite_cmd)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection:
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id)
                try:
                     rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear) –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è vision) ---
@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} —Å –ø–æ–¥–ø–∏—Å—å—é: '{message.caption[:50] if message.caption else '[–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏]'}...'")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(
        db, user_id, message.from_user.username,
        message.from_user.first_name, message.from_user.last_name
    )
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Vision API
    try:
        if user_id in active_requests:
             await message.reply(
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.",
                 reply_markup=progress_keyboard(user_id)
             )
             return
             
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.photo[-1].file_id)
        image_bio = await bot.download_file(file.file_path)
        image_bytes = image_bio.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        mime_type = "image/jpeg"
        if file.file_path and '.png' in file.file_path.lower():
            mime_type = "image/png"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –¥–ª—è Vision API
        history = await get_last_messages(db, user_id)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        history.append({
            "role": "user",
            "content": [
                {"type": "text", "text": message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"},
                {"type": "image_url", "image_url": {
                    "url": f"data:{mime_type};base64,{base64_image}"
                }}
            ]
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–±–µ–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        await add_message_to_db(db, user_id, "user", message.caption or "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        active_requests[user_id] = asyncio.current_task() # –í–∞–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ó–ê–î–ê–ß–£, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–∞—Å–∫
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º placeholder
        placeholder = await message.reply("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=progress_keyboard(user_id))
        current_msg_id = placeholder.message_id
        full_response = ""
        
        # –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç –æ—Ç gpt-4.1-mini Vision
        async for chunk in stream_o4mini_response(current_settings.OPENAI_API_KEY, SYSTEM_PROMPT, history):
            full_response += chunk
            # –î–æ–±–∞–≤–∏–º —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            now = time.monotonic()
            last_edit_time = globals().get(f"last_edit_{user_id}", 0)
            edit_interval = 1.5
            if now - last_edit_time > edit_interval:
                try:
                    preview_html = markdown_to_telegram_html(full_response + "...")
                    await bot.edit_message_text(
                        text=preview_html,
                        chat_id=chat_id,
                        message_id=current_msg_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    globals()[f"last_edit_{user_id}"] = now
                except TelegramRetryAfter as e:
                    logger.warning(f"Throttled editing photo response: RetryAfter {e.retry_after}s")
                    await asyncio.sleep(e.retry_after + 0.1)
                    globals()[f"last_edit_{user_id}"] = time.monotonic()
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                    if "message to edit not found" in str(e).lower():
                        break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ
                        
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        try:
             final_html = markdown_to_telegram_html(full_response)
             await bot.edit_message_text(
                 text=final_html,
                 chat_id=chat_id,
                 message_id=current_msg_id,
                 parse_mode=ParseMode.HTML,
                 reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
             )
             await message.answer("ü´°", reply_markup=main_menu_keyboard()) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            try:
                await bot.edit_message_text(text=full_response, chat_id=chat_id, message_id=current_msg_id, reply_markup=None)
                await message.answer("ü´°", reply_markup=main_menu_keyboard())
            except Exception as final_err:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –¥–∞–∂–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç: {final_err}")
                 await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        if full_response:
            await add_message_to_db(db, user_id, "assistant", full_response)
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ photo_handler –¥–ª—è user_id={user_id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        active_requests.pop(user_id, None)
        globals().pop(f"last_edit_{user_id}", None) # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@dp.message(F.document)
async def document_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    file_name = message.document.file_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    mime_type = message.document.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    file_id = message.document.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={user_id}: {file_name} (type: {mime_type}, file_id: {file_id})")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(db, user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–ø—É—â–µ–Ω –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' (–ª–∏–º–∏—Ç OK).")
    await message.reply(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}'...")
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–¥–µ—Å—å

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ReplyKeyboardMarkup
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def handle_new_dialog_button(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
    await clear_command_handler(message)

@dp.message(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
async def handle_my_limits_button(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    if not db:
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    user_data = await get_user(db, user_id)
    if not user_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return
    limit_info = f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today', 'N/A')}"
    sub_info = "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription_status') == 'active':
        expires_ts = user_data.get('subscription_expires')
        if isinstance(expires_ts, datetime.datetime):
            expires_str = expires_ts.strftime('%Y-%m-%d %H:%M')
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_str}"
        else:
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_ts}"
    await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö:\n\n{limit_info}\n{sub_info}")

@dp.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.reply(
        "–†–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞'.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n- 7 –¥–Ω–µ–π / 100 —Ä—É–±.\n- 30 –¥–Ω–µ–π / 300 —Ä—É–±.\n\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)"
    )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    help_text = (
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "ü§ñ –Ø –ø–µ—Ä–≤—ã–π \"—É–º–Ω—ã–π\" –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n"
        "üìä –ö–Ω–æ–ø–∫–∞ \"–ú–æ–∏ –ª–∏–º–∏—Ç—ã\" –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞.\n"
        "üíé –ö–Ω–æ–ø–∫–∞ \"–ü–æ–¥–ø–∏—Å–∫–∞\" —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤."
    )
    await message.reply(help_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def handle_ask_question_button(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç üëá", reply_markup=main_menu_keyboard())

@dp.message(F.text == "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ")
async def handle_generate_photo_button(message: types.Message):
    user_id = message.from_user.id
    pending_photo_prompts.add(user_id)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (–æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å)", reply_markup=main_menu_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_shutdown
async def on_shutdown(**kwargs):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    # –ü–æ–ª—É—á–∞–µ–º dp –∏ –∏–∑ –Ω–µ–≥–æ workflow_data
    dp_local = kwargs.get('dispatcher') # aiogram –ø–µ—Ä–µ–¥–∞–µ—Ç dispatcher
    if not dp_local:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dispatcher –≤ on_shutdown")
        return

    db = dp_local.workflow_data.get('db')
    settings_local = dp_local.workflow_data.get('settings')

    if db and settings_local:
        if not settings_local.USE_SQLITE:
            try:
                # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
                if isinstance(db, asyncpg.Pool):
                    await db.close()
                    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç 'db' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º asyncpg, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL: {e}")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'db' –∏–ª–∏ 'settings' –∏–∑ workflow_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.")

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) ---
async def set_bot_commands(bot_instance: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        types.BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        types.BotCommand(command="/admin", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"),
        types.BotCommand(command="/find_user", description="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"),
        types.BotCommand(command="/list_subs", description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"),
        types.BotCommand(command="/grant_admin", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/grant_sub", description="–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π"),
        types.BotCommand(command="/send_to_user", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        types.BotCommand(command="/broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
    ]
    try:
        await bot_instance.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    db_connection = None # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è

    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if settings.USE_SQLITE:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            db_connection = await init_sqlite_db(settings.DATABASE_URL) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {settings.DATABASE_URL}")
                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è create_pool
                db_connection = await asyncio.wait_for(
                    asyncpg.create_pool(dsn=settings.DATABASE_URL, timeout=30.0, command_timeout=60.0, min_size=1, max_size=10),
                    timeout=45.0 # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
                )
                if not db_connection:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL (–≤–µ—Ä–Ω—É–ª—Å—è None)")
                    sys.exit(1)

                logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                await init_db_postgres(db_connection)

            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                sys.exit(1)
            except (socket.gaierror, OSError) as e: # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/DNS
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ DNS –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –≤ DATABASE_URL.")
                sys.exit(1)
            except asyncpg.exceptions.InvalidPasswordError:
                 logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                 sys.exit(1)
            except asyncpg.exceptions.InvalidCatalogNameError as e: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É InvalidCatalogNameError
                 logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ URL, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. {e}")
                 sys.exit(1)
            except asyncpg.PostgresError as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—É—Ç—å –∫ SQLite –∏–ª–∏ –ø—É–ª PG) –≤ workflow_data
        dp.workflow_data['db'] = db_connection
        dp.workflow_data['settings'] = settings
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DB –∏ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dispatcher")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ shutdown –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dp.shutdown.register(on_shutdown)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ - –ø–æ–º–µ—â–∞–µ–º –∑–¥–µ—Å—å, –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ try
        await set_bot_commands(bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á
async def cleanup_tasks():
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        [task.cancel() for task in tasks]
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

async def generate_response_task(
    message: types.Message,
    db,
    current_settings: Settings,
    user_id: int,
    user_text: str,
    chat_id: int
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
    progress_msg = None
    full_raw = ""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_msg = await message.reply(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
            reply_markup=progress_keyboard(user_id)
        )
        progress_message_ids[user_id] = progress_msg.message_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        await add_message_to_db(db, user_id, "user", user_text)
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        current_text = ""
        last_edit = time.monotonic()
        interval = 1.5
        formatting_failed = False
        # –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        async for chunk in stream_o4mini_response(
            current_settings.OPENAI_API_KEY,
            SYSTEM_PROMPT,
            history
        ):
            full_raw += chunk
            current_text += chunk
            now = time.monotonic()
            if now - last_edit > interval and progress_msg:
                try:
                    preview = markdown_to_telegram_html(current_text) + '...'
                    await bot.edit_message_text(
                        text=preview,
                        chat_id=chat_id,
                        message_id=progress_msg.message_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    last_edit = now
                except TelegramRetryAfter as rte:
                    await asyncio.sleep(rte.retry_after + 0.1)
                    last_edit = time.monotonic()
                except TelegramAPIError:
                    formatting_failed = True
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        if progress_msg:
            final_text = markdown_to_telegram_html(current_text) if not formatting_failed else current_text
            await bot.edit_message_text(
                text=final_text,
                chat_id=chat_id,
                message_id=progress_msg.message_id,
                parse_mode=ParseMode.HTML,
                reply_markup=None
            )
            await message.answer("ü´°", reply_markup=main_menu_keyboard())
        else:
            # –ï—Å–ª–∏ progress_msg –∏—Å—á–µ–∑, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π
            parts = split_text(markdown_to_telegram_html(full_raw))
            for i, part in enumerate(parts):
                await message.answer(part, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard() if i == len(parts)-1 else None)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if full_raw:
            await add_message_to_db(db, user_id, "assistant", full_raw)
    except asyncio.CancelledError:
        # –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ
        if progress_msg:
            try:
                await bot.edit_message_text(
                    text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    chat_id=chat_id,
                    message_id=progress_msg.message_id,
                    reply_markup=None
                )
            except TelegramAPIError:
                pass
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ generate_response_task –¥–ª—è user_id={user_id}: {e}")
        if progress_msg:
            try:
                await bot.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
                    chat_id=chat_id,
                    message_id=progress_msg.message_id,
                    reply_markup=None
                )
            except TelegramAPIError:
                pass
    finally:
        progress_message_ids.pop(user_id, None)
        active_requests.pop(user_id, None)

# --- –ù–ê–ß–ê–õ–û: –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π is_admin ---

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
ADMIN_COMMANDS_LIST = [
    ("/admin", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥."),
    ("/stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."),
    ("/find_user", "`<id_or_username>` - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ @username."),
    ("/list_subs", "`[active|expired]` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'active', –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 'expired')."),
    ("/grant_admin", "–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."),
    ("/grant_sub", "`<user_id> <7|30>` - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."),
    ("/send_to_user", "`<user_id> <text>` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."),
    ("/broadcast", "`<text>` - **–û–°–¢–û–†–û–ñ–ù–û!** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)."),
]

@dp.message(Command("admin"), IsAdmin())
async def admin_help_menu(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥."""
    help_lines = ["<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"]

    for command, description in ADMIN_COMMANDS_LIST:
        escaped_description = html.escape(description)
        help_lines.append(f"<code>{command}</code> - {escaped_description}")

    help_text = "\n".join(help_lines)
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("stats"), IsAdmin())
async def admin_stats_enhanced(message: types.Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    try:
        stats = await get_extended_stats(db, settings_local)
        report = (
            "üìä *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* üìä\n\n"
            "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            f"- –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_week']}\n"
            f"- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
            f"- –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_week']}\n\n"
            "*–ü–æ–¥–ø–∏—Å–∫–∏:*\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {stats['active_subs']}\n"
            f"- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_subs_today']}\n"
            f"- –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_subs_week']}\n"
            f"- –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: {stats['expiring_subs']}\n"
        )
        await message.reply(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(Command("grant_admin"), IsAdmin())
async def grant_admin_handler(message: types.Message):
    db = dp.workflow_data.get('db')
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_admin <user_id>")
    try:
        target_id = int(parts[1])
    except ValueError:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target = await get_user(db, target_id)
    if not target:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update_user_admin(db, target_id, True)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@dp.message(Command("grant_sub"), IsAdmin())
async def grant_sub_handler(message: types.Message):
    """–í—ã–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π."""
    db = dp.workflow_data.get('db')
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_sub <user_id> <days>")
    try:
        target_id = int(parts[1])
        days = int(parts[2])
    except ValueError:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ: /grant_sub <user_id> <days>")
    if days not in (7, 30):
        return await message.reply("–ú–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π.")
    target = await get_user(db, target_id)
    if not target:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await update_user_subscription(db, target_id, days)
    new_data = await get_user(db, target_id)
    expires = new_data.get('subscription_expires')
    await message.reply(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {expires}).")

@dp.message(Command("broadcast"), IsAdmin())
async def broadcast_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    user_id = message.from_user.id
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è IsAdmin
    settings_local = dp.workflow_data.get('settings')
    text = (command.args or "").strip()
    if not text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
    if settings_local.USE_SQLITE:
        def _all_ids():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM users")
            ids = [r[0] for r in cur.fetchall()]
            conn.close()
            return ids
        user_ids = await asyncio.to_thread(_all_ids)
    else:
        async with db.acquire() as conn:
            records = await conn.fetch("SELECT user_id FROM users")
            user_ids = [r['user_id'] for r in records]
    sent = 0
    total = len(user_ids)
    for uid in user_ids:
        try:
            await bot.send_message(uid, text)
            sent += 1
            logger.info(f"Broadcast to {uid} succeeded")
        except Exception as e:
            logger.warning(f"Broadcast to {uid} failed: {e}")
        await asyncio.sleep(0.1)
    await message.reply(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent}/{total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("find_user"), IsAdmin())
async def admin_find_user(message: types.Message, command: CommandObject):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    if not db:
        return await message.reply("–û—à–∏–±–∫–∞ –ë–î")
    if not command.args:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username: /find_user <query>")
    query = command.args.strip()
    user_data = None
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID
    try:
        user_id_to_find = int(query)
        user_data = await get_user(db, user_id_to_find)
    except ValueError:
        # –ü–æ–∏—Å–∫ –ø–æ username
        query_lower = query.lower().lstrip('@')
        if settings_local.USE_SQLITE:
            def _find_by_username():
                conn = sqlite3.connect(db)
                conn.row_factory = sqlite3.Row
                cur = conn.cursor()
                cur.execute(
                    "SELECT * FROM users WHERE lower(username) = ?", (query_lower,)
                )
                row = cur.fetchone()
                conn.close()
                return dict(row) if row else None
            user_data = await asyncio.to_thread(_find_by_username)
        else:
            async with db.acquire() as conn:
                row = await conn.fetchrow(
                    "SELECT * FROM users WHERE lower(username) = $1", query_lower
                )
                user_data = dict(row) if row else None
    if not user_data:
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    info_lines = [f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':"]
    info_lines.append(f"ID: {user_data.get('user_id')}")
    info_lines.append(f"Username: {user_data.get('username')}")
    info_lines.append(
        f"–ò–º—è: {user_data.get('first_name')} {user_data.get('last_name')}"
    )
    info_lines.append(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('registration_date')}")
    info_lines.append(
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('last_active_date')}"
    )
    info_lines.append(
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today')}"
    )
    info_lines.append(
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {user_data.get('subscription_status')}"
    )
    info_lines.append(
        f"–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: {user_data.get('subscription_expires')}"
    )
    info_lines.append(f"–ê–¥–º–∏–Ω: {user_data.get('is_admin')}" )
    await message.reply("\n".join(info_lines))

@dp.message(Command("list_subs"), IsAdmin())
async def list_subs_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    mode = (command.args or "active").strip().lower()
    logger.info(f"Admin {message.from_user.id} –≤—ã–∑–≤–∞–ª /list_subs mode={mode}")
    if settings_local.USE_SQLITE:
        def _list():
            conn = sqlite3.connect(db)
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            if mode == "active":
                cur.execute("SELECT user_id, username FROM users WHERE subscription_status='active'")
            else:
                cur.execute(
                    "SELECT user_id, username FROM users WHERE subscription_status='inactive' AND DATE(subscription_expires) BETWEEN DATE('now','-7 days') AND DATE('now')"
                )
            rows = cur.fetchall()
            conn.close()
            return rows
        rows = await asyncio.to_thread(_list)
        subs = [dict(r) for r in rows]
    else:
        async with db.acquire() as conn:
            if mode == "active":
                records = await conn.fetch("SELECT user_id, username FROM users WHERE subscription_status='active'")
            else:
                records = await conn.fetch(
                    "SELECT user_id, username FROM users WHERE subscription_status='inactive' AND subscription_expires BETWEEN (NOW() - INTERVAL '7 days') AND NOW()"
                )
            subs = [dict(r) for r in records]
    if not subs:
        await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
        return
    lines = [f"{s['user_id']} (@{s.get('username','')})" for s in subs]
    text = f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ ({mode}):\n" + "\n".join(lines)
    await message.reply(text)

@dp.message(Command("send_to_user"), IsAdmin())
async def send_to_user_handler(message: types.Message, command: CommandObject):
    db = dp.workflow_data.get('db')
    settings_local = dp.workflow_data.get('settings')
    # –õ–∏–±–æ —Ñ–∏–ª—å—Ç—Ä IsAdmin
    parts = (command.args or "").split(None, 1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to_user <user_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        target = int(parts[0])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")
        return
    text = parts[1]
    try:
        await bot.send_message(target, text)
        logger.info(f"Admin {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
        await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {target}: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")

# --- –ö–û–ù–ï–¶: –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---

# --- Admin helper functions: —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ---
async def get_extended_stats(db, settings: Settings) -> dict[str, int]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    # SQLite
    if settings.USE_SQLITE:
        def _ext():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users")
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE last_active_date>=DATE('now')")
            active_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE last_active_date>=DATE('now','-7 days')")
            active_week = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE registration_date>=DATE('now')")
            new_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE registration_date>=DATE('now','-7 days')")
            new_week = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires>DATE('now')")
            active_subs = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=DATE('now')")
            new_subs_today = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=DATE('now','-7 days')")
            new_subs_week = cur.fetchone()[0]
            cur.execute(
                "SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires BETWEEN DATE('now') AND DATE('now','+7 days')"
            )
            expiring = cur.fetchone()[0]
            conn.close()
            return {
                'total_users': total,
                'active_today': active_today,
                'active_week': active_week,
                'new_today': new_today,
                'new_week': new_week,
                'active_subs': active_subs,
                'new_subs_today': new_subs_today,
                'new_subs_week': new_subs_week,
                'expiring_subs': expiring
            }
        return await asyncio.to_thread(_ext)
    # PostgreSQL
    async with db.acquire() as conn:
        rec = await conn.fetchrow(
            """
            SELECT
             (SELECT COUNT(*) FROM users) AS total,
             (SELECT COUNT(*) FROM users WHERE last_active_date>=CURRENT_DATE) AS active_today,
             (SELECT COUNT(*) FROM users WHERE last_active_date>=(CURRENT_DATE - INTERVAL '7 days')) AS active_week,
             (SELECT COUNT(*) FROM users WHERE registration_date>=CURRENT_DATE) AS new_today,
             (SELECT COUNT(*) FROM users WHERE registration_date>=(CURRENT_DATE - INTERVAL '7 days')) AS new_week,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires>NOW()) AS active_subs,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=CURRENT_DATE) AS new_subs_today,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND registration_date>=(CURRENT_DATE - INTERVAL '7 days')) AS new_subs_week,
             (SELECT COUNT(*) FROM users WHERE subscription_status='active' AND subscription_expires BETWEEN NOW() AND (NOW() + INTERVAL '7 days')) AS expiring_subs
            """
        )
    return {
        'total_users': rec['total'],
        'active_today': rec['active_today'],
        'active_week': rec['active_week'],
        'new_today': rec['new_today'],
        'new_week': rec['new_week'],
        'active_subs': rec['active_subs'],
        'new_subs_today': rec['new_subs_today'],
        'new_subs_week': rec['new_subs_week'],
        'expiring_subs': rec['expiring_subs']
    }

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
@dp.callback_query(F.data.startswith("cancel_generation_"))
async def cancel_generation_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É, —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    try:
        user_id_to_cancel = int(callback.data.rsplit("_", 1)[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return

    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –±—ã–ª–∞
    task = active_requests.pop(user_id_to_cancel, None)
    if task:
        task.cancel()
        db = dp.workflow_data.get('db')
        settings_local = dp.workflow_data.get('settings')
        if db and settings_local:
            try:
                if settings_local.USE_SQLITE:
                    def _restore():
                        conn = sqlite3.connect(db)
                        cursor = conn.cursor()
                        cursor.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = ?",
                            (user_id_to_cancel,)
                        )
                        conn.commit()
                        conn.close()
                    await asyncio.to_thread(_restore)
                else:
                    async with db.acquire() as conn:
                        await conn.execute(
                            "UPDATE users SET free_messages_today = free_messages_today + 1 WHERE user_id = $1",
                            user_id_to_cancel
                        )
            except Exception:
                logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è user_id={user_id_to_cancel}")

    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramAPIError:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "ü´°",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(F.data == "clear_history")
async def clear_history_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ bot.dispatcher)
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback)")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        callback.from_user.username,
        callback.from_user.first_name,
        callback.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_history_callback")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ ch1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_history_callback): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite():
                db_path = db # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection: # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id) # –£–±—Ä–∞–ª RETURNING id –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                # result —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "DELETE N", –ø–∞—Ä—Å–∏–º N
                try:
                    rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1 # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await callback.answer(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)", show_alert=False)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback) –¥–ª—è user_id={user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear ---
@dp.message(Command("clear"))
async def clear_command_handler(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear)")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_command_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ cl1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_command): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite_cmd():
                db_path = db
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite_cmd)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection:
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id)
                try:
                     rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear) –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è vision) ---
@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} —Å –ø–æ–¥–ø–∏—Å—å—é: '{message.caption[:50] if message.caption else '[–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏]'}...'")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(
        db, user_id, message.from_user.username,
        message.from_user.first_name, message.from_user.last_name
    )
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3p), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Vision API
    try:
        if user_id in active_requests:
             await message.reply(
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.",
                 reply_markup=progress_keyboard(user_id)
             )
             return
             
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.photo[-1].file_id)
        image_bio = await bot.download_file(file.file_path)
        image_bytes = image_bio.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        mime_type = "image/jpeg"
        if file.file_path and '.png' in file.file_path.lower():
            mime_type = "image/png"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –¥–ª—è Vision API
        history = await get_last_messages(db, user_id)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        history.append({
            "role": "user",
            "content": [
                {"type": "text", "text": message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"},
                {"type": "image_url", "image_url": {
                    "url": f"data:{mime_type};base64,{base64_image}"
                }}
            ]
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–±–µ–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        await add_message_to_db(db, user_id, "user", message.caption or "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        active_requests[user_id] = asyncio.current_task() # –í–∞–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ó–ê–î–ê–ß–£, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–∞—Å–∫
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º placeholder
        placeholder = await message.reply("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=progress_keyboard(user_id))
        current_msg_id = placeholder.message_id
        full_response = ""
        
        # –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç –æ—Ç gpt-4.1-mini Vision
        async for chunk in stream_o4mini_response(current_settings.OPENAI_API_KEY, SYSTEM_PROMPT, history):
            full_response += chunk
            # –î–æ–±–∞–≤–∏–º —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            now = time.monotonic()
            last_edit_time = globals().get(f"last_edit_{user_id}", 0)
            edit_interval = 1.5
            if now - last_edit_time > edit_interval:
                try:
                    preview_html = markdown_to_telegram_html(full_response + "...")
                    await bot.edit_message_text(
                        text=preview_html,
                        chat_id=chat_id,
                        message_id=current_msg_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    globals()[f"last_edit_{user_id}"] = now
                except TelegramRetryAfter as e:
                    logger.warning(f"Throttled editing photo response: RetryAfter {e.retry_after}s")
                    await asyncio.sleep(e.retry_after + 0.1)
                    globals()[f"last_edit_{user_id}"] = time.monotonic()
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                    if "message to edit not found" in str(e).lower():
                        break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ
                        
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        try:
             final_html = markdown_to_telegram_html(full_response)
             await bot.edit_message_text(
                 text=final_html,
                 chat_id=chat_id,
                 message_id=current_msg_id,
                 parse_mode=ParseMode.HTML,
                 reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
             )
             await message.answer("ü´°", reply_markup=main_menu_keyboard()) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            try:
                await bot.edit_message_text(text=full_response, chat_id=chat_id, message_id=current_msg_id, reply_markup=None)
                await message.answer("ü´°", reply_markup=main_menu_keyboard())
            except Exception as final_err:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –¥–∞–∂–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç: {final_err}")
                 await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        if full_response:
            await add_message_to_db(db, user_id, "assistant", full_response)
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ photo_handler –¥–ª—è user_id={user_id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        active_requests.pop(user_id, None)
        globals().pop(f"last_edit_{user_id}", None) # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@dp.message(F.document)
async def document_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    file_name = message.document.file_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    mime_type = message.document.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    file_id = message.document.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={user_id}: {file_name} (type: {mime_type}, file_id: {file_id})")

    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await get_or_create_user(db, user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    if not user_data:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3d), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    is_allowed = await check_and_consume_limit(db, current_settings, user_id)
    if not is_allowed:
        kb = InlineKeyboardBuilder()
        kb.button(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_info")
        await message.reply(
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòî\n"
            "–õ–∏–º–∏—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=kb.as_markup()
        )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–ø—É—â–µ–Ω –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' (–ª–∏–º–∏—Ç OK).")
    await message.reply(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}'...")
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–¥–µ—Å—å

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ReplyKeyboardMarkup
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def handle_new_dialog_button(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
    await clear_command_handler(message)

@dp.message(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
async def handle_my_limits_button(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    if not db:
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    user_data = await get_user(db, user_id)
    if not user_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return
    limit_info = f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today', 'N/A')}"
    sub_info = "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription_status') == 'active':
        expires_ts = user_data.get('subscription_expires')
        if isinstance(expires_ts, datetime.datetime):
            expires_str = expires_ts.strftime('%Y-%m-%d %H:%M')
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_str}"
        else:
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_ts}"
    await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö:\n\n{limit_info}\n{sub_info}")

@dp.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.reply(
        "–†–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞'.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n- 7 –¥–Ω–µ–π / 100 —Ä—É–±.\n- 30 –¥–Ω–µ–π / 300 —Ä—É–±.\n\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)"
    )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    help_text = (
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "ü§ñ –Ø –ø–µ—Ä–≤—ã–π \"—É–º–Ω—ã–π\" –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n"
        "üìä –ö–Ω–æ–ø–∫–∞ \"–ú–æ–∏ –ª–∏–º–∏—Ç—ã\" –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞.\n"
        "üíé –ö–Ω–æ–ø–∫–∞ \"–ü–æ–¥–ø–∏—Å–∫–∞\" —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤."
    )
    await message.reply(help_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def handle_ask_question_button(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç üëá", reply_markup=main_menu_keyboard())

@dp.message(F.text == "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ")
async def handle_generate_photo_button(message: types.Message):
    user_id = message.from_user.id
    pending_photo_prompts.add(user_id)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (–æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å)", reply_markup=main_menu_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_shutdown
async def on_shutdown(**kwargs):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    # –ü–æ–ª—É—á–∞–µ–º dp –∏ –∏–∑ –Ω–µ–≥–æ workflow_data
    dp_local = kwargs.get('dispatcher') # aiogram –ø–µ—Ä–µ–¥–∞–µ—Ç dispatcher
    if not dp_local:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dispatcher –≤ on_shutdown")
        return

    db = dp_local.workflow_data.get('db')
    settings_local = dp_local.workflow_data.get('settings')

    if db and settings_local:
        if not settings_local.USE_SQLITE:
            try:
                # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
                if isinstance(db, asyncpg.Pool):
                    await db.close()
                    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç 'db' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º asyncpg, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL: {e}")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'db' –∏–ª–∏ 'settings' –∏–∑ workflow_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.")

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) ---
async def set_bot_commands(bot_instance: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        types.BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        types.BotCommand(command="/admin", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"),
        types.BotCommand(command="/find_user", description="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"),
        types.BotCommand(command="/list_subs", description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"),
        types.BotCommand(command="/grant_admin", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/grant_sub", description="–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –∏–ª–∏ 30 –¥–Ω–µ–π"),
        types.BotCommand(command="/send_to_user", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        types.BotCommand(command="/broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
    ]
    try:
        await bot_instance.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    db_connection = None # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è

    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if settings.USE_SQLITE:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            db_connection = await init_sqlite_db(settings.DATABASE_URL) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {settings.DATABASE_URL}")
                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è create_pool
                db_connection = await asyncio.wait_for(
                    asyncpg.create_pool(dsn=settings.DATABASE_URL, timeout=30.0, command_timeout=60.0, min_size=1, max_size=10),
                    timeout=45.0 # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
                )
                if not db_connection:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL (–≤–µ—Ä–Ω—É–ª—Å—è None)")
                    sys.exit(1)

                logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                await init_db_postgres(db_connection)

            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                sys.exit(1)
            except (socket.gaierror, OSError) as e: # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/DNS
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ DNS –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –≤ DATABASE_URL.")
                sys.exit(1)
            except asyncpg.exceptions.InvalidPasswordError:
                 logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                 sys.exit(1)
            except asyncpg.exceptions.InvalidCatalogNameError as e: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É InvalidCatalogNameError
                 logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ URL, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. {e}")
                 sys.exit(1)
            except asyncpg.PostgresError as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—É—Ç—å –∫ SQLite –∏–ª–∏ –ø—É–ª PG) –≤ workflow_data
        dp.workflow_data['db'] = db_connection
        dp.workflow_data['settings'] = settings
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DB –∏ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dispatcher")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ shutdown –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dp.shutdown.register(on_shutdown)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ - –ø–æ–º–µ—â–∞–µ–º –∑–¥–µ—Å—å, –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ try
        await set_bot_commands(bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á
async def cleanup_tasks():
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        [task.cancel() for task in tasks]
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def update_user_admin(db, target_user_id: int, make_admin: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ is_admin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è target_user_id"""
    if settings.USE_SQLITE:
        def _upd():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute(
                "UPDATE users SET is_admin = ? WHERE user_id = ?",
                (1 if make_admin else 0, target_user_id)
            )
            conn.commit()
            conn.close()
        await asyncio.to_thread(_upd)
    else:
        async with db.acquire() as conn:
            await conn.execute(
                "UPDATE users SET is_admin = $1 WHERE user_id = $2",
                make_admin, target_user_id
            )

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ---
async def update_user_subscription(db, target_user_id: int, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ days –¥–Ω–µ–π."""
    if settings.USE_SQLITE:
        def _upd():
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute(
                "UPDATE users SET subscription_status='active', subscription_expires=date('now', '+' || ? || ' days') WHERE user_id = ?",
                (days, target_user_id)
            )
            conn.commit()
            conn.close()
        await asyncio.to_thread(_upd)
    else:
        async with db.acquire() as conn:
            await conn.execute(
                "UPDATE users SET subscription_status='active', subscription_expires = NOW() + $1 * INTERVAL '1 day' WHERE user_id = $2",
                days, target_user_id
            )

@dp.message(F.voice)
async def voice_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        logger.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (voice_handler): –Ω–µ—Ç DB/–Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await message.reply("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}")

    if user_id in active_requests:
        try:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.",
                reply_markup=progress_keyboard(user_id)
            )
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ (voice): {e}")
        return
    active_requests[user_id] = asyncio.current_task()

    placeholder = None
    current_msg_id = None

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await bot.get_file(message.voice.file_id)
        voice_io: io.BytesIO = await bot.download_file(file_info.file_path)
        voice_io.seek(0)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ BytesIO

        # ---> –ó–ê–ú–ï–ù–ê: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg <----
        logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGA –∞—É–¥–∏–æ –≤ MP3 —Å –ø–æ–º–æ—â—å—é ffmpeg...")
        voice_data_bytes = voice_io.read()
        if not voice_data_bytes:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–∞–π—Ç—ã –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            active_requests.pop(user_id, None)
            return

        ogg_path = None
        mp3_path = None
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π OGG —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as ogg_file:
                ogg_file.write(voice_data_bytes)
                ogg_path = ogg_file.name

            # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ MP3 —Ñ–∞–π–ª–∞
            mp3_path = ogg_path + '.mp3'

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ffmpeg
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH
            process = await asyncio.create_subprocess_exec(
                'ffmpeg', '-i', ogg_path, '-c:a', 'libmp3lame', '-q:a', '2', mp3_path, # -q:a 2 –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode != 0:
                logger.error(f"ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {process.returncode}):\n{stderr.decode()}")
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {stderr.decode()}")

            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ MP3 —Ñ–∞–π–ª–∞
            with open(mp3_path, 'rb') as mp3_file:
                mp3_data_bytes = mp3_file.read()

            if not mp3_data_bytes:
                raise ValueError("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 —Å –ø–æ–º–æ—â—å—é ffmpeg –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")

            audio_file_tuple = ("voice.mp3", mp3_data_bytes, "audio/mpeg")
            logger.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ MP3 —Å –ø–æ–º–æ—â—å—é ffmpeg ({len(mp3_data_bytes)} –±–∞–π—Ç).")

        except FileNotFoundError:
            logger.exception("–ö–æ–º–∞–Ω–¥–∞ 'ffmpeg' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
            await message.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            active_requests.pop(user_id, None)
            return
        except Exception as conversion_err:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ffmpeg: {conversion_err}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
            active_requests.pop(user_id, None)
            return
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if ogg_path and os.path.exists(ogg_path):
                os.unlink(ogg_path)
            if mp3_path and os.path.exists(mp3_path):
                os.unlink(mp3_path)
        # ---> –ö–û–ù–ï–¶ –ó–ê–ú–ï–ù–´ <---

        # –û—Ç–ø—Ä–∞–≤–∫–∞ MP3 —Ñ–∞–π–ª–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ MP3 –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–º–æ–¥–µ–ª—å: gpt-4o-transcribe)...")
        placeholder = await message.reply("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", reply_markup=progress_keyboard(user_id))
        current_msg_id = placeholder.message_id

        transcript = openai_client.audio.transcriptions.create(
            file=audio_file_tuple,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂ —Å MP3 –¥–∞–Ω–Ω—ã–º–∏
            model="gpt-4o-transcribe"
        )
        user_text = transcript.text
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–∫—Å—Ç: {user_text[:100]}...")

        if placeholder:
             await bot.edit_message_text(
                 text=escape_markdown_v2(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: _{user_text}_"),
                 chat_id=chat_id,
                 message_id=current_msg_id,
                 parse_mode=ParseMode.MARKDOWN_V2,
                 reply_markup=None
             )
             placeholder = None
             current_msg_id = None

        await add_message_to_db(db, user_id, "user", user_text)
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç: {user_text[:100]}...")
        placeholder = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", reply_markup=progress_keyboard(user_id))
        current_msg_id = placeholder.message_id
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        full_response = ""
        formatting_failed = False
        last_edit_time = time.monotonic()
        edit_interval = 1.5

        async for chunk in stream_o4mini_response(current_settings.OPENAI_API_KEY, SYSTEM_PROMPT, history):
            full_response += chunk
            now = time.monotonic()
            if now - last_edit_time > edit_interval and placeholder:
                try:
                    preview = markdown_to_telegram_html(full_response) + ('...' if chunk else '')
                    if not preview.strip(): preview = "‚è≥..."
                    await bot.edit_message_text(
                        text=preview,
                        chat_id=chat_id,
                        message_id=current_msg_id,
                        parse_mode=None if formatting_failed else ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                    last_edit_time = now
                except TelegramRetryAfter as rte:
                    await asyncio.sleep(rte.retry_after + 0.1)
                    last_edit_time = time.monotonic()
                except TelegramAPIError as api_err:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (voice response stream): {api_err}")
                    if 'parse' in str(api_err).lower() and not formatting_failed:
                        formatting_failed = True
                        logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ raw —Ç–µ–∫—Å—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML.")
                    if "message to edit not found" in str(api_err).lower():
                         logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                         placeholder = None
                         current_msg_id = None
                         break

        if placeholder:
            try:
                final_text = markdown_to_telegram_html(full_response) if not formatting_failed else full_response
                if not final_text.strip(): final_text = "(–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI)"
                await bot.edit_message_text(
                    text=final_text,
                    chat_id=chat_id,
                    message_id=current_msg_id,
                    parse_mode=None if formatting_failed else ParseMode.HTML,
                    reply_markup=None
                )
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–æ–ª–æ—Å: {e}")
                try:
                     final_text_fallback = full_response if full_response.strip() else "(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç)"
                     await message.answer(final_text_fallback, reply_markup=main_menu_keyboard())
                except Exception as final_send_err:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {final_send_err}")
        elif full_response:
             await message.answer(full_response, reply_markup=main_menu_keyboard())
        else:
             await message.answer("ü´°", reply_markup=main_menu_keyboard())

        if full_response:
            await add_message_to_db(db, user_id, "assistant", full_response)

    except BadRequestError as e:
        logger.exception(f"–û—à–∏–±–∫–∞ OpenAI (400 Bad Request) –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ MP3: {e.body}")
        if placeholder and current_msg_id:
             try: await bot.edit_message_reply_markup(chat_id, current_msg_id, reply_markup=None)
             except TelegramAPIError: pass
        error_detail = e.body.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if hasattr(e, 'body') and e.body else '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞ OpenAI: {error_detail}", reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ voice_handler –¥–ª—è user_id={user_id}: {e}")
        if placeholder and current_msg_id:
            try: await bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id=chat_id, message_id=current_msg_id, reply_markup=None)
            except TelegramAPIError: pass
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=main_menu_keyboard())

    finally:
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ voice_handler –¥–ª—è user_id={user_id}. –û—á–∏—Å—Ç–∫–∞ active_requests.")
        removed_task = active_requests.pop(user_id, None)
        if removed_task: logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ active_requests (voice) –¥–ª—è user_id={user_id}")
        else: logger.warning(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ active_requests –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ (voice).")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
            asyncio.run(cleanup_tasks())
            logger.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as cleanup_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á: {cleanup_err}")